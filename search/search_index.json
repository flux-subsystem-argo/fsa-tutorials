{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction FSA (aka Flamingo) is Flux Subsystem for Argo. FSA's container image can be used as a drop-in replacement for the equivalent Argo CD version to visualize, and manage Flux workloads, alongside Argo CD. How does it work? Getting Started with a Fresh KIND cluster In this getting started guide, you'll be walked through steps to prepare your ultimate GitOps environment using Argo CD and Flux. We'll bootstrap everything, including installation of Argo CD, from this public repo. So no manual step of Argo CD installation is required. In case you're forking this repo and change its visibility to private, you will be required to setup a Secret to authenticate your Git repo. At the end of this guide, you'll have Flux running alongside Argo CD locally on your KIND cluster. You'll run FSA in the anonymous mode, and see 2 pre-defined Argo CD Applications, each of which points to its equivalent Flux Kustomization. Install CLIs - KIND cli - Flux cli - Argo CD cli Example install in macOS or Linux via homebrew # install KIND cli brew install kind # install Flux CLI brew install fluxcd/tap/flux # install Argo CD CLI brew install argocd Create a fresh KIND cluster kind create cluster Install Flux flux install You can check the Flux namespace ( flux-system ) for running pods kubectl get pods -n flux-system . After Pods are ready, then you can copy, and paste this snippet to bootstrap the demo. cat <<EOF | kubectl apply -f - --- apiVersion: source.toolkit.fluxcd.io/v1beta2 kind: OCIRepository metadata: name: fsa-demo namespace: flux-system spec: interval: 30s url: oci://ghcr.io/flux-subsystem-argo/flamingo/manifests ref: tag: latest --- apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 kind: Kustomization metadata: name: fsa-demo namespace: flux-system spec: prune: true interval: 2m path: \"./demo\" sourceRef: kind: OCIRepository name: fsa-demo timeout: 3m EOF You can check Argo CD pods are running and Ready kubectl get -n argocd pods . Finally, port forward and open your browser to http://localhost:8080 kubectl -n argocd port-forward svc/argocd-server 8080:443 You'll find 2 FSA Applications, each of which consists of 1 Flux's Kustomization and 1 Flux's GitRepository.","title":"Introduction"},{"location":"#introduction","text":"FSA (aka Flamingo) is Flux Subsystem for Argo. FSA's container image can be used as a drop-in replacement for the equivalent Argo CD version to visualize, and manage Flux workloads, alongside Argo CD.","title":"Introduction"},{"location":"#how-does-it-work","text":"","title":"How does it work?"},{"location":"#getting-started-with-a-fresh-kind-cluster","text":"In this getting started guide, you'll be walked through steps to prepare your ultimate GitOps environment using Argo CD and Flux. We'll bootstrap everything, including installation of Argo CD, from this public repo. So no manual step of Argo CD installation is required. In case you're forking this repo and change its visibility to private, you will be required to setup a Secret to authenticate your Git repo. At the end of this guide, you'll have Flux running alongside Argo CD locally on your KIND cluster. You'll run FSA in the anonymous mode, and see 2 pre-defined Argo CD Applications, each of which points to its equivalent Flux Kustomization. Install CLIs - KIND cli - Flux cli - Argo CD cli Example install in macOS or Linux via homebrew # install KIND cli brew install kind # install Flux CLI brew install fluxcd/tap/flux # install Argo CD CLI brew install argocd Create a fresh KIND cluster kind create cluster Install Flux flux install You can check the Flux namespace ( flux-system ) for running pods kubectl get pods -n flux-system . After Pods are ready, then you can copy, and paste this snippet to bootstrap the demo. cat <<EOF | kubectl apply -f - --- apiVersion: source.toolkit.fluxcd.io/v1beta2 kind: OCIRepository metadata: name: fsa-demo namespace: flux-system spec: interval: 30s url: oci://ghcr.io/flux-subsystem-argo/flamingo/manifests ref: tag: latest --- apiVersion: kustomize.toolkit.fluxcd.io/v1beta2 kind: Kustomization metadata: name: fsa-demo namespace: flux-system spec: prune: true interval: 2m path: \"./demo\" sourceRef: kind: OCIRepository name: fsa-demo timeout: 3m EOF You can check Argo CD pods are running and Ready kubectl get -n argocd pods . Finally, port forward and open your browser to http://localhost:8080 kubectl -n argocd port-forward svc/argocd-server 8080:443 You'll find 2 FSA Applications, each of which consists of 1 Flux's Kustomization and 1 Flux's GitRepository.","title":"Getting Started with a Fresh KIND cluster"},{"location":"tutorials/","text":"Tutorials Overview","title":"Tutorials Overview"},{"location":"tutorials/#tutorials-overview","text":"","title":"Tutorials Overview"},{"location":"tutorials/terraform/","text":"GitOps Terraform Resources with Argo CD and Flux Subsystem for Argo \u23f2\ufe0f Estimated time use: 12 minutes . This is a tutorial to show how could we use Flux Subsystem for Argo (FSA) to bring the Terraform management feature from the Flux world to your Argo CD UI. In order to do so, we need Weave GitOps Terraform Controller to help us reconcile our Terraform resources. What is Weave GitOps Terraform Controller? Weave GitOps Terraform Controller aka Weave TF-controller is a Kubernetes controller that allows us to GitOpsify Terraform resources without rewriting them to YAML files. We can use Weave TF-controller in any GitOps environment managed by Flux or Argo CD. In this tutorial, we use FSA to bring Weave TF-controller to Argo CD. Tools used in this tutorial We use the following tools in this tutorial. A Kubernetes cluster. EKS on AWS, or kind on your desktop. Argo CD v2.2.12 Flux v2 0.32.0 Flux Subsystem for Argo FL.2 Weave GitOps Terraform Controller v0.11.0 or later kubectl kustomize yq (optional) Create a new KIND cluster If you already have a kind cluster you can skip this step. Also, if you'd like to use Kubernetes on a cloud like EKS on AWS, you can skip this step as well. To create a new kind cluster, please install kind CLI and run the following command. kind create cluster Install Argo CD We use the official Argo CD instructions to install Argo CD. If you already have Argo CD v2.2.8 installed, you can skip this step. The installation here is the non-HA one. Please refer to the Argo CD documentation for the HA installation which is not covered by this tutorial. \u2b50\u2b50 You can also skip this step if you choose to install Flux Subsystem for Argo from scratch (see: Option 3 ) \u2b50\u2b50 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.2.12/manifests/install.yaml Install Flux Subsystem for Argo At your terminal, please set FSA_VERSION variable to a specific version of Flux Subsystem for Argo you'd like to install. In this tutorial, we use v2.2.12-fl.2-main-a5a71f34 . export FSA_VERSION=v2.2.12-fl.2-main-a5a71f34 There are many options to install Flux Subsystem for Argo . Please choose one of the followings to upgrade your existing Argo CD to FSA, replace the current Argo CD instalation with FSA, or install FSA from scratch. Option 1 - Upgrade the existing Argo CD This option is to upgrade your existing Argo CD. If you already have Argo CD installed, you would want to go with replacing the image of the existing instllation with the image from FSA. kustomize build https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION} \\ | yq e '. | select(.kind==\"Deployment\" or .kind==\"StatefulSet\")' - \\ | kubectl -n argocd apply -f - Option 2 - Replace the current Argo CD This option will replace your current installation, including every setting in your configmaps. kubectl -n argocd apply -k https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION} Option 3 - Install FSA from Scratch With this option, you don't need any existing Argo CD installation. kubectl create ns argocd kubectl -n argocd apply -k https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION} Install Flux After installing FSA, now we install Flux into the cluster, simply by running the following commands. brew install fluxcd/tap/flux flux install Login to Argo CD UI For a fresh Argo CD or FSA installation, you would find your initial admin password by running this command. kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo Then please forward Argo CD UI's port to localhost:8080, open it with your Web browser and login with admin and your password found by the previous command. kubectl -n argocd port-forward svc/argocd-server 8080:443 Install Weave GitOps Terraform Controller Weave GitOps Terraform Controller can be installed using its Helm chart. Now we have Flux Subsystem for Argo installed, we'll install a Helm chart via FSA. \u2b50\u2b50 What is the difference between installation of a Helm chart with Argo CD and with FSA? Argo CD uses helm template then kubectl apply to install Helm charts. With this incomplete Helm support, sometime Helm chart installations are broken. FSA, on the other hand, installs Helm charts via the official Helm SDK built into the Flux's Helm controller, which provides the more robust Helm support. \u2b50\u2b50 With FSA, your Argo CD UI will have 2 additional check boxes, \u2611\ufe0f Use Flux Subsystem , and \u2611\ufe0f Auto-Create Flux Resources . To make FSA work correctly, \u2611\ufe0f Apply Out Of Sync Only is also required. FSA does not change the way you work with Argo CD UI, just fill the Repository URL with https://weaveworks.github.io/tf-controller , specify the chart name tf-controller and choose the chart version which is 0.2.6 . Let's review values we need here. Application Name: tf-controller Project: default Sync Policy: Manual Sync Options: \u2611\ufe0f Apply Out Of Sync Only \u2611\ufe0f Use Flux Subsystem \u2611\ufe0f Auto-Create Flux Resources Repository URL: https://weaveworks.github.io/tf-controller Chart: tf-controller Cluster URL: https://kubernetes.default.svc Namespace: flux-system After review, please make sure that you check all 3 check boxes before click the \"Create\" button, and you are good to go. Connect to a Terraform GitOps repo Now Weave TF-controller is installed and ready to use for GitOpsifying our Terraform resources. To make it easy for everyone, we'll use a simple hello world Terraform file, which does not require any credentials, in this tutorial. This hello world Terraform is in the Git repository, which already contains everything. What you need to do is to fork the provided repository, create a new Flux Subsystem App in Argo CD, and done. Let's start. Fork https://github.com/flux-subsystem-argo/tf-controller-helloworld to your GitHub account. Edit ./infra/setup.yaml , change the URL to your repository. Now it's time to create an App to manage our Terraform resource with Flux Subsystem for Argo. Please use the following configuration for the new App ( helloworld ) Application Name: helloworld Project: default Sync Policy: Manual Sync Options: \u2611\ufe0f Auto-Create Namespace \u2611\ufe0f Apply Out Of Sync Only \u2611\ufe0f Use Flux Subsystem \u2611\ufe0f Auto-Create Flux Resources Repository URL: https://github.com/YOUR-GITHUB-ACCOUNT/tf-controller-helloworld Revision: main Path: ./infra Cluster URL: https://kubernetes.default.svc Namespace: dev After create the App, press Sync button once and wait. You could also press Refresh to see if the graph already there. If everything is correct, you would get something like the following screenshot, with a nice Terraform icon!! What did this main.tf do? This Terraform file did not provision anything, expect an output, which you might see that it was written into a Secret named helloworld-outputs , also shown in the graph. What's inside that output secrets, here's the command to help you find out. kubectl -n dev get secret helloworld-outputs -o jsonpath=\"{.data.hello_world}\" | base64 -d; echo Summary Flux Subsystem for Argo brings Terrform to your Argo CD UI. Not only TF-controller, you can virtually use any Flux features side-by-side with your Argo CD. What's next? You can now try provisioning your own Terraform resources by tweaking the main.tf file. Commit and push to see the change. Flux Subsystem for Argo is currently a Technology Preview. Feedback really welcome to help improve it. This project aims at simplifying anyone DevOps journey, improving DevOps pipelines by the best GitOps technologies available.","title":"GitOps Terraform Resources with Argo CD and Flux Subsystem for Argo"},{"location":"tutorials/terraform/#gitops-terraform-resources-with-argo-cd-and-flux-subsystem-for-argo","text":"\u23f2\ufe0f Estimated time use: 12 minutes . This is a tutorial to show how could we use Flux Subsystem for Argo (FSA) to bring the Terraform management feature from the Flux world to your Argo CD UI. In order to do so, we need Weave GitOps Terraform Controller to help us reconcile our Terraform resources.","title":"GitOps Terraform Resources with Argo CD and Flux Subsystem for Argo"},{"location":"tutorials/terraform/#what-is-weave-gitops-terraform-controller","text":"Weave GitOps Terraform Controller aka Weave TF-controller is a Kubernetes controller that allows us to GitOpsify Terraform resources without rewriting them to YAML files. We can use Weave TF-controller in any GitOps environment managed by Flux or Argo CD. In this tutorial, we use FSA to bring Weave TF-controller to Argo CD.","title":"What is Weave GitOps Terraform Controller?"},{"location":"tutorials/terraform/#tools-used-in-this-tutorial","text":"We use the following tools in this tutorial. A Kubernetes cluster. EKS on AWS, or kind on your desktop. Argo CD v2.2.12 Flux v2 0.32.0 Flux Subsystem for Argo FL.2 Weave GitOps Terraform Controller v0.11.0 or later kubectl kustomize yq (optional)","title":"Tools used in this tutorial"},{"location":"tutorials/terraform/#create-a-new-kind-cluster","text":"If you already have a kind cluster you can skip this step. Also, if you'd like to use Kubernetes on a cloud like EKS on AWS, you can skip this step as well. To create a new kind cluster, please install kind CLI and run the following command. kind create cluster","title":"Create a new KIND cluster"},{"location":"tutorials/terraform/#install-argo-cd","text":"We use the official Argo CD instructions to install Argo CD. If you already have Argo CD v2.2.8 installed, you can skip this step. The installation here is the non-HA one. Please refer to the Argo CD documentation for the HA installation which is not covered by this tutorial. \u2b50\u2b50 You can also skip this step if you choose to install Flux Subsystem for Argo from scratch (see: Option 3 ) \u2b50\u2b50 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.2.12/manifests/install.yaml","title":"Install Argo CD"},{"location":"tutorials/terraform/#install-flux-subsystem-for-argo","text":"At your terminal, please set FSA_VERSION variable to a specific version of Flux Subsystem for Argo you'd like to install. In this tutorial, we use v2.2.12-fl.2-main-a5a71f34 . export FSA_VERSION=v2.2.12-fl.2-main-a5a71f34 There are many options to install Flux Subsystem for Argo . Please choose one of the followings to upgrade your existing Argo CD to FSA, replace the current Argo CD instalation with FSA, or install FSA from scratch.","title":"Install Flux Subsystem for Argo"},{"location":"tutorials/terraform/#option-1-upgrade-the-existing-argo-cd","text":"This option is to upgrade your existing Argo CD. If you already have Argo CD installed, you would want to go with replacing the image of the existing instllation with the image from FSA. kustomize build https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION} \\ | yq e '. | select(.kind==\"Deployment\" or .kind==\"StatefulSet\")' - \\ | kubectl -n argocd apply -f -","title":"Option 1 - Upgrade the existing Argo CD"},{"location":"tutorials/terraform/#option-2-replace-the-current-argo-cd","text":"This option will replace your current installation, including every setting in your configmaps. kubectl -n argocd apply -k https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION}","title":"Option 2 - Replace the current Argo CD"},{"location":"tutorials/terraform/#option-3-install-fsa-from-scratch","text":"With this option, you don't need any existing Argo CD installation. kubectl create ns argocd kubectl -n argocd apply -k https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION}","title":"Option 3 - Install FSA from Scratch"},{"location":"tutorials/terraform/#install-flux","text":"After installing FSA, now we install Flux into the cluster, simply by running the following commands. brew install fluxcd/tap/flux flux install","title":"Install Flux"},{"location":"tutorials/terraform/#login-to-argo-cd-ui","text":"For a fresh Argo CD or FSA installation, you would find your initial admin password by running this command. kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo Then please forward Argo CD UI's port to localhost:8080, open it with your Web browser and login with admin and your password found by the previous command. kubectl -n argocd port-forward svc/argocd-server 8080:443","title":"Login to Argo CD UI"},{"location":"tutorials/terraform/#install-weave-gitops-terraform-controller","text":"Weave GitOps Terraform Controller can be installed using its Helm chart. Now we have Flux Subsystem for Argo installed, we'll install a Helm chart via FSA. \u2b50\u2b50 What is the difference between installation of a Helm chart with Argo CD and with FSA? Argo CD uses helm template then kubectl apply to install Helm charts. With this incomplete Helm support, sometime Helm chart installations are broken. FSA, on the other hand, installs Helm charts via the official Helm SDK built into the Flux's Helm controller, which provides the more robust Helm support. \u2b50\u2b50 With FSA, your Argo CD UI will have 2 additional check boxes, \u2611\ufe0f Use Flux Subsystem , and \u2611\ufe0f Auto-Create Flux Resources . To make FSA work correctly, \u2611\ufe0f Apply Out Of Sync Only is also required. FSA does not change the way you work with Argo CD UI, just fill the Repository URL with https://weaveworks.github.io/tf-controller , specify the chart name tf-controller and choose the chart version which is 0.2.6 . Let's review values we need here. Application Name: tf-controller Project: default Sync Policy: Manual Sync Options: \u2611\ufe0f Apply Out Of Sync Only \u2611\ufe0f Use Flux Subsystem \u2611\ufe0f Auto-Create Flux Resources Repository URL: https://weaveworks.github.io/tf-controller Chart: tf-controller Cluster URL: https://kubernetes.default.svc Namespace: flux-system After review, please make sure that you check all 3 check boxes before click the \"Create\" button, and you are good to go.","title":"Install Weave GitOps Terraform Controller"},{"location":"tutorials/terraform/#connect-to-a-terraform-gitops-repo","text":"Now Weave TF-controller is installed and ready to use for GitOpsifying our Terraform resources. To make it easy for everyone, we'll use a simple hello world Terraform file, which does not require any credentials, in this tutorial. This hello world Terraform is in the Git repository, which already contains everything. What you need to do is to fork the provided repository, create a new Flux Subsystem App in Argo CD, and done. Let's start. Fork https://github.com/flux-subsystem-argo/tf-controller-helloworld to your GitHub account. Edit ./infra/setup.yaml , change the URL to your repository. Now it's time to create an App to manage our Terraform resource with Flux Subsystem for Argo. Please use the following configuration for the new App ( helloworld ) Application Name: helloworld Project: default Sync Policy: Manual Sync Options: \u2611\ufe0f Auto-Create Namespace \u2611\ufe0f Apply Out Of Sync Only \u2611\ufe0f Use Flux Subsystem \u2611\ufe0f Auto-Create Flux Resources Repository URL: https://github.com/YOUR-GITHUB-ACCOUNT/tf-controller-helloworld Revision: main Path: ./infra Cluster URL: https://kubernetes.default.svc Namespace: dev After create the App, press Sync button once and wait. You could also press Refresh to see if the graph already there. If everything is correct, you would get something like the following screenshot, with a nice Terraform icon!! What did this main.tf do? This Terraform file did not provision anything, expect an output, which you might see that it was written into a Secret named helloworld-outputs , also shown in the graph. What's inside that output secrets, here's the command to help you find out. kubectl -n dev get secret helloworld-outputs -o jsonpath=\"{.data.hello_world}\" | base64 -d; echo","title":"Connect to a Terraform GitOps repo"},{"location":"tutorials/terraform/#summary","text":"Flux Subsystem for Argo brings Terrform to your Argo CD UI. Not only TF-controller, you can virtually use any Flux features side-by-side with your Argo CD. What's next? You can now try provisioning your own Terraform resources by tweaking the main.tf file. Commit and push to see the change. Flux Subsystem for Argo is currently a Technology Preview. Feedback really welcome to help improve it. This project aims at simplifying anyone DevOps journey, improving DevOps pipelines by the best GitOps technologies available.","title":"Summary"}]}