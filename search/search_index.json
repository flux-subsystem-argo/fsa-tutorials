{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Flamingo is the Flux Subsystem for Argo (FSA). Flamingo's container image can be used as a drop-in extension for the equivalent ArgoCD version to visualize, and manage Flux workloads, alongside ArgoCD. You can also ensure that upstream CVEs in Argo CD are quickly backported to Flamingo, maintaining a secure and stable environment.</p>"},{"location":"#why-use-flamingo","title":"Why use Flamingo?","text":"<p>Flamingo is a tool that combines Flux and Argo CD to provide the best of both worlds for implementing GitOps on Kubernetes clusters. With Flamingo, you can:</p> <ol> <li> <p>Automate the deployment of your applications to Kubernetes clusters and benefit from the improved collaboration and deployment speed and reliability that GitOps offers.</p> </li> <li> <p>Enjoy a seamless and integrated experience for managing deployments, with the automation capabilities of Flux embedded inside the user-friendly interface of Argo CD.</p> </li> <li> <p>Take advantage of additional features and capabilities that are not available in either Flux or Argo CD individually, such as the robust Helm support from Flux, Flux OCI Repository, Weave GitOps Terraform Controller for Infrastructure as Code, Weave Policy Engine, or Argo CD ApplicationSet for Flux-managed resources.</p> </li> </ol>"},{"location":"#how-does-it-work","title":"How does it work?","text":""},{"location":"#getting-started-with-flamingo-cli","title":"Getting Started with Flamingo CLI","text":"<p>Flamingo CLI is the recommended way to install Flamingo for production use.</p> <p>This guide will provide a step-by-step process for setting up a GitOps environment using Flux and ArgoCD, via Flamingo. By the end of this guide, you will have Flamingo running on your cluster. You will create a podinfo application with a Flux Kustomization, and generate a Flamingo app from this Flux object.</p>"},{"location":"#install-clis","title":"Install CLIs","text":"<p>You can install required CLI via Homebrew.</p> <pre><code># install Flux CLI\nbrew install fluxcd/tap/flux\n\n# install Flamingo CLI\nbrew install flux-subsystem-argo/tap/flamingo\n</code></pre>"},{"location":"#install-flux","title":"Install Flux","text":"<pre><code>flux install\n</code></pre>"},{"location":"#install-flamingo","title":"Install Flamingo","text":"<pre><code>flamingo install\n\n# or with a specific Flamingo version\nflamingo install --version=v2.8.6\n</code></pre>"},{"location":"#create-a-podinfo-flux-kustomization","title":"Create a Podinfo Flux Kustomization","text":"<pre><code>cat &lt;&lt; EOF | kubectl apply -f -\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: podinfo-kustomize\n---\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: podinfo\n  namespace: podinfo-kustomize\nspec:\n  interval: 10m\n  url: oci://ghcr.io/stefanprodan/manifests/podinfo\n  ref:\n    tag: latest\n---\napiVersion: kustomize.toolkit.fluxcd.io/v1\nkind: Kustomization\nmetadata:\n  name: podinfo\n  namespace: podinfo-kustomize\nspec:\n  interval: 10m\n  targetNamespace: podinfo-kustomize\n  prune: true\n  sourceRef:\n    kind: OCIRepository\n    name: podinfo\n  path: ./\nEOF\n</code></pre>"},{"location":"#generate-app-to-view-the-podinfo-ks","title":"Generate App to view the Podinfo KS","text":"<pre><code>flamingo generate-app \\\n  --app-name=podinfo-ks \\\n  -n podinfo-kustomize ks/podinfo\n</code></pre>"},{"location":"#login-to-the-flamingo-ui","title":"Login to the Flamingo UI","text":"<p>Like a normal Argo CD instance, please firstly obtain the initial password by running the following command to login. The default username is <code>admin</code>.</p> <pre><code>flamingo show-init-password\n</code></pre> <p>After that you can port forward and open your browser to http://localhost:8080</p> <pre><code>kubectl -n argocd port-forward svc/argocd-server 8080:443\n</code></pre>"},{"location":"#getting-started-with-a-fresh-kind-cluster","title":"Getting Started with a Fresh KIND cluster","text":"<p>In this getting started guide, you'll be walked through steps to prepare your ultimate GitOps environment using Argo CD and Flux. We'll bootstrap everything, including installation of Argo CD, from this public repo. So no manual step of Argo CD installation is required. In case you're forking this repo and change its visibility to private, you will be required to setup a Secret to authenticate your Git repo.</p> <p>At the end of this guide, you'll have Flux running alongside Argo CD locally on your KIND cluster. You'll run FSA in the anonymous mode, and see 2 pre-defined Argo CD Applications, each of which points to its equivalent Flux Kustomization.</p> <p>Install CLIs - KIND cli  - Flux cli - Argo CD cli</p> <p>Example install in macOS or Linux via homebrew</p> <pre><code># install KIND cli\nbrew install kind\n\n# install Flux CLI\nbrew install fluxcd/tap/flux\n\n# install Argo CD CLI\nbrew install argocd\n\n</code></pre> <p>Create a fresh KIND cluster</p> <pre><code>kind create cluster\n</code></pre> <p>Install Flux</p> <pre><code>flux install\n\n</code></pre> <p>You can check the Flux namespace (<code>flux-system</code>) for running pods <code>kubectl get pods -n flux-system</code>.</p> <p>After Pods are ready, then you can copy, and paste this snippet to bootstrap the demo.</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\n---\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: OCIRepository\nmetadata:\n  name: fsa-demo\n  namespace: flux-system\nspec:\n  interval: 30s\n  url: oci://ghcr.io/flux-subsystem-argo/flamingo/manifests\n  ref:\n    tag: latest\n---\napiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: fsa-demo\n  namespace: flux-system\nspec:\n  prune: true\n  interval: 2m\n  path: \"./demo\"\n  sourceRef:\n    kind: OCIRepository\n    name: fsa-demo\n  timeout: 3m\nEOF\n</code></pre> <p>You can check Argo CD pods are running and Ready <code>kubectl get -n argocd pods</code>. Finally, port forward and open your browser to http://localhost:8080</p> <pre><code>kubectl -n argocd port-forward svc/argocd-server 8080:443\n</code></pre> <p>You'll find 2 FSA Applications, each of which consists of 1 Flux's Kustomization and 1 Flux's GitRepository.</p> <p></p> <p></p>"},{"location":"tutorials/","title":"Tutorials Overview","text":""},{"location":"tutorials/terraform/","title":"GitOps Terraform Resources with Argo CD and Flux Subsystem for Argo","text":"<p>\u23f2\ufe0f Estimated time use: 12 minutes.</p> <p>This is a tutorial to show how could we use Flamingo (which is Flux Subsystem for Argo) to bring the Terraform management feature from the Flux world to your Argo CD UI. In order to do so, we need Weave GitOps Terraform Controller to help us reconcile our Terraform resources.</p>"},{"location":"tutorials/terraform/#what-is-weave-gitops-terraform-controller","title":"What is Weave GitOps Terraform Controller?","text":"<p>Weave GitOps Terraform Controller aka Weave TF-controller is a Kubernetes controller that allows us to GitOpsify Terraform resources without rewriting them to YAML files. We can use Weave TF-controller in any GitOps environment managed by Flux or Argo CD. In this tutorial, we use FSA to bring Weave TF-controller to Argo CD.</p>"},{"location":"tutorials/terraform/#tools-used-in-this-tutorial","title":"Tools used in this tutorial","text":"<p>We use the following tools in this tutorial.</p> <ul> <li>A Kubernetes cluster. EKS on AWS, or <code>kind</code> on your desktop.</li> <li>Argo CD v2.6.x</li> <li>Flux v2 0.41.x</li> <li>Flux Subsystem for Argo FL.4</li> <li>Weave GitOps Terraform Controller v0.14.0 or later</li> <li><code>kubectl</code></li> <li><code>kustomize</code></li> <li><code>yq</code> (optional)</li> </ul>"},{"location":"tutorials/terraform/#create-a-new-kind-cluster","title":"Create a new KIND cluster","text":"<p>If you already have a <code>kind</code> cluster you can skip this step. Also, if you'd like to use Kubernetes on a cloud like EKS on AWS, you can skip this step as well.</p> <p>To create a new <code>kind</code> cluster, please install <code>kind</code> CLI and run the following command.</p> <pre><code>kind create cluster\n</code></pre>"},{"location":"tutorials/terraform/#install-argo-cd","title":"Install Argo CD","text":"<p>We use the official Argo CD instructions to install Argo CD. If you already have Argo CD v2.2.8 installed, you can skip this step.  The installation here is the non-HA one. Please refer to the Argo CD documentation for the HA installation which is not covered by this tutorial.</p> <p>\u2b50\u2b50 You can also skip this step if you choose to install Flux Subsystem for Argo from scratch (see: Option 3) \u2b50\u2b50</p> <pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.6.6/manifests/install.yaml\n</code></pre>"},{"location":"tutorials/terraform/#install-flux-subsystem-for-argo","title":"Install Flux Subsystem for Argo","text":"<p>At your terminal, please set <code>FSA_VERSION</code> variable to a specific version of Flux Subsystem for Argo you'd like to install. In this tutorial, we use <code>v2.6.6-fl.4-main-0d5eae51</code>.</p> <pre><code>export FSA_VERSION=v2.6.6-fl.4-main-0d5eae51\n</code></pre> <p>There are many options to install Flux Subsystem for Argo. Please choose one of the followings to upgrade your existing Argo CD to FSA, replace the current Argo CD instalation with FSA, or install FSA from scratch.</p>"},{"location":"tutorials/terraform/#option-1-upgrade-the-existing-argo-cd","title":"Option 1 - Upgrade the existing Argo CD","text":"<p>This option is to upgrade your existing Argo CD.  If you already have Argo CD installed, you would want to go with replacing the image of the existing instllation with the image from FSA.</p> <pre><code>kustomize build https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION} \\\n  | yq e '. | select(.kind==\"Deployment\" or .kind==\"StatefulSet\")' - \\\n  | kubectl -n argocd apply -f - \n</code></pre>"},{"location":"tutorials/terraform/#option-2-replace-the-current-argo-cd","title":"Option 2 - Replace the current Argo CD","text":"<p>This option will replace your current installation, including every setting in your configmaps.</p> <pre><code>kubectl -n argocd apply -k https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION}\n</code></pre>"},{"location":"tutorials/terraform/#option-3-install-fsa-from-scratch","title":"Option 3 - Install FSA from Scratch","text":"<p>With this option, you don't need any existing Argo CD installation.</p> <pre><code>kubectl create ns argocd\nkubectl -n argocd apply -k https://github.com/flux-subsystem-argo/flamingo//release?ref=${FSA_VERSION}\n</code></pre>"},{"location":"tutorials/terraform/#install-flux","title":"Install Flux","text":"<p>After installing FSA, now we install Flux into the cluster, simply by running the following commands.</p> <pre><code>brew install fluxcd/tap/flux\nflux install\n</code></pre>"},{"location":"tutorials/terraform/#login-to-argo-cd-ui","title":"Login to Argo CD UI","text":"<p>For a fresh Argo CD or FSA installation, you would find your initial admin password by running this command.</p> <pre><code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo\n</code></pre> <p>Then please forward Argo CD UI's port to localhost:8080, open it with your Web browser and login with <code>admin</code> and your password found by the previous command.</p> <pre><code>kubectl -n argocd port-forward svc/argocd-server 8080:443\n</code></pre>"},{"location":"tutorials/terraform/#install-weave-gitops-terraform-controller","title":"Install Weave GitOps Terraform Controller","text":"<p>Weave GitOps Terraform Controller can be installed using its Helm chart. Now we have Flux Subsystem for Argo installed, we'll install a Helm chart via FSA.</p> <p>\u2b50\u2b50 What is the difference between installation of a Helm chart with Argo CD and with FSA? Argo CD uses <code>helm template</code> then <code>kubectl apply</code> to install Helm charts. With this incomplete Helm support,  sometime Helm chart installations are broken. FSA, on the other hand, installs Helm charts via the official Helm SDK built into the Flux's Helm controller,  which provides the more robust Helm support. \u2b50\u2b50</p> <p>With FSA, your Argo CD UI will have 2 additional check boxes, \u2611\ufe0f Use Flux Subsystem, and \u2611\ufe0f Auto-Create Flux Resources. To make FSA work correctly, \u2611\ufe0f Apply Out Of Sync Only is also required.</p> <p></p> <p>FSA does not change the way you work with Argo CD UI, just fill the Repository URL with <code>https://weaveworks.github.io/tf-controller</code>, specify the chart name <code>tf-controller</code> and choose the chart version which is <code>0.11.0</code>.</p> <p></p> <p>Let's review values we need here.</p> <ul> <li>Application Name: tf-controller</li> <li>Project: default</li> <li>Sync Policy: Manual</li> <li>Sync Options: <ul> <li>\u2611\ufe0f Apply Out Of Sync Only</li> <li>\u2611\ufe0f Use Flux Subsystem</li> <li>\u2611\ufe0f Auto-Create Flux Resources</li> </ul> </li> <li>Repository URL: https://weaveworks.github.io/tf-controller</li> <li>Chart: tf-controller</li> <li>Cluster URL: https://kubernetes.default.svc</li> <li>Namespace: flux-system</li> </ul> <p>After review, please make sure that you check all 3 check boxes before click the \"Create\" button, and you are good to go.</p> <p></p>"},{"location":"tutorials/terraform/#connect-to-a-terraform-gitops-repo","title":"Connect to a Terraform GitOps repo","text":"<p>Now Weave TF-controller is installed and ready to use for GitOpsifying our Terraform resources.</p> <p>To make it easy for everyone, we'll use a simple hello world Terraform file, which does not require any credentials, in this tutorial. This hello world Terraform is in the Git repository, which already contains everything. What you need to do is to fork the provided repository, create a new Flux Subsystem App in Argo CD, and done.</p> <p>Let's start.</p> <ul> <li>Fork <code>https://github.com/flux-subsystem-argo/tf-controller-helloworld</code> to your GitHub account.</li> <li>Edit <code>./infra/setup.yaml</code>, change the URL to your repository.</li> </ul> <p>Now it's time to create an App to manage our Terraform resource with Flux Subsystem for Argo. Please use the following configuration for the new App (<code>helloworld</code>)</p> <ul> <li>Application Name: helloworld</li> <li>Project: default</li> <li>Sync Policy: Manual</li> <li>Sync Options: <ul> <li>\u2611\ufe0f Auto-Create Namespace</li> <li>\u2611\ufe0f Apply Out Of Sync Only</li> <li>\u2611\ufe0f Use Flux Subsystem</li> <li>\u2611\ufe0f Auto-Create Flux Resources</li> </ul> </li> <li>Repository URL: https://github.com/YOUR-GITHUB-ACCOUNT/tf-controller-helloworld</li> <li>Revision: main</li> <li>Path: ./infra</li> <li>Cluster URL: https://kubernetes.default.svc</li> <li>Namespace: dev</li> </ul> <p>After create the App, press Sync button once and wait. You could also press Refresh to see if the graph already there. If everything is correct, you would get something like the following screenshot, with a nice Terraform icon!!</p> <p></p> <p>What did this <code>main.tf</code> do? This Terraform file did not provision anything, expect an output,  which you might see that it was written into a Secret named <code>helloworld-outputs</code>, also shown in the graph.</p> <p>What's inside that output secrets, here's the command to help you find out.</p> <pre><code>kubectl -n dev get secret helloworld-outputs -o jsonpath=\"{.data.hello_world}\" | base64 -d; echo\n</code></pre>"},{"location":"tutorials/terraform/#summary","title":"Summary","text":"<p>Flux Subsystem for Argo brings Terrform to your Argo CD UI. Not only TF-controller, you can virtually use any Flux features side-by-side with your Argo CD.</p> <p>What's next? You can now try provisioning your own Terraform resources by tweaking the <code>main.tf</code> file. Commit and push to see the change. Flux Subsystem for Argo is currently a Technology Preview. Feedback really welcome to help improve it. This project aims at simplifying anyone DevOps journey, improving DevOps pipelines by the best GitOps technologies available.</p>"}]}